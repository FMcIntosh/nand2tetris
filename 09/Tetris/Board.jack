// the Snake game grid.  Hack's screen is 512x256 pixels, but a single
// pixel is too fine for a user to control, so we use 4x4 pixel blocks,
// turning the screen into a 128x64 grid we also need a status line.  The
// Hack screen can have 23x64 characters of text, so each line takes a
// bit over 11 pixels.  We reserve the bottom 16 pixels, leaving 512x240
// for game use

class Board {

    // the size of the grid
    field int nRows, nCols, startRowPixel, startColPixel, squareSize, score, shapeCounter;
    field String scoreString, gameOverString, tetrisString;
    field boolean gameOver;
    

    // a two-dimensional array that tells us where the snake is
    field Array grid;
    field Shape shape;

    // creates a new Board given a pixel size
    constructor Board new() {
        let nRows = 17;
        let nCols = 12;
        let startRowPixel= 10;
        let startColPixel = 200;
        let squareSize = 14;
        let score = 0;
        let shapeCounter = 0;
        let gameOver = false;
        let scoreString = "Score";
        let gameOverString = "GAME OVER";
        let tetrisString = "TETRIS";
        do spawnShape();
        do initGrid();
        do draw();
        return this;
    }

    method void spawnShape() {
      let shape = Shape.new(0, 4, startRowPixel, startColPixel, squareSize);
      return;
    }

     // initializes the grid
    method void initGrid() {

        var int i, j;
        var Array row;

        let grid = Array.new(nRows);
        let i = 0;

        while( i < nRows) {
            let row = Array.new(nCols);
            let j = 0;
            while( j < nCols) {
                let row[j] = false;
                let j = j + 1;
            }
            let grid[i] = row;
            let i = i + 1;
        }
        return;
    }

    // disposes of a Board
    method void dispose() {
        var int i;
        var Array row;
        let i = 0;
        while( i < nRows) {
            let row = grid[i];
            do row.dispose();
            let i = i + 1;
        }
        do Memory.deAlloc(this);
        return;

    }

    method void drawOutline() {
      var int endRowPixel, endColPixel, rowPixel, colPixel;
     
      var int i, j;
      var Array row;


      let endRowPixel = startRowPixel + (squareSize * nRows);
      let endColPixel = startColPixel + (squareSize * nCols);
      let i = 0;

      while( i < (nRows + 1)) {
        let rowPixel = startRowPixel + (squareSize * i);
        do Screen.drawLine(startColPixel, rowPixel, endColPixel, rowPixel);
        let i = i + 1;
      }
      let j = 0;
      while( j < (nCols +1)) {
          let colPixel = startColPixel + (squareSize * j);
          do Screen.drawLine(colPixel, startRowPixel, colPixel, endRowPixel);
          let j = j + 1;
        }
      return;
    }

    method void drawGrid(boolean clear) {
      var int i, j;
      var Array row;
        do Screen.setColor(true);
        let i = 0;
        while( i < nRows) {
          // do Output.printInt(i);
            let row = grid[i];
             
            let j = 0;
            while(j < nCols) {
              if (row[j]) {
                do Screen.setColor(true);
                do Screen.drawRectangle( (0 + j) * squareSize + startColPixel,(0 +  i) * squareSize +  startRowPixel, (0 + j) * squareSize + squareSize + startColPixel, (0 + i) * squareSize + squareSize + startRowPixel);
              } else {
                if (clear){
                do Screen.setColor(false);
                do Screen.drawRectangle( (0 + j) * squareSize + startColPixel,(0 +  i) * squareSize +  startRowPixel, (0 + j) * squareSize + squareSize + startColPixel, (0 + i) * squareSize + squareSize + startRowPixel);
                do Screen.setColor(true);
                }
              }
                let j = j + 1;
            }
            let i = i + 1;
        }

        do Screen.setColor(true);
        return;
    }

    method void draw() {
      do shape.draw(false);
      do drawGrid(false);
      do drawOutline();
      do drawScore();
      do Output.moveCursor(2 , 4);
      do Output.printString(tetrisString);
      return;
    }

    method void drawScore() {
       do Output.moveCursor(4 , 4);
       do Output.printString(scoreString);
       do Output.moveCursor(6, 4);
       do Output.printInt(score);
       return;
    }

    method boolean tick() {
      do moveShapeDown();
      return gameOver;
    }



    method void moveShapeDown() {
    var Array newPosition, position;
      var boolean isValidMove;
      let newPosition = shape.peekMoveDown();
      let isValidMove = checkValidPosition(newPosition);
      if (isValidMove) {
        do shape.moveDown();
        do drawOutline();
        do drawGrid(false);
      } else {
        let position = shape.peekPosition();
        do addToGrid(position);
        do shape.draw(true);
        do shape.dispose();
        do drawGrid(true);
         do drawOutline();
        let shapeCounter = shapeCounter + 1;
        do Random.setSeed(shapeCounter);
        do spawnShape();
        do position.dispose();
        let position = shape.peekPosition();
         let isValidMove = checkValidPosition(position);
         // if we've spawned a shape in an invalid position then it's game over
         if (~isValidMove) {
           let gameOver = true;
            do Output.moveCursor(10 , 4);
            do Output.printString(gameOverString);
         }
      }
       
      return;
    }

     method void dropShape() {
    var Array newPosition, position;
      var boolean isValidMove;
      let newPosition = shape.peekMoveDown();
      let isValidMove = checkValidPosition(newPosition);
      while (isValidMove) {
        do shape.moveDown();
        do drawOutline();
        do drawGrid(false);
        let newPosition = shape.peekMoveDown();
        let isValidMove = checkValidPosition(newPosition);
      }

        let position = shape.peekPosition();
        do addToGrid(position);
        do shape.draw(true);
        do shape.dispose();
        do drawGrid(true);
        do drawOutline();
        let shapeCounter = shapeCounter + 1;
        do Random.setSeed(shapeCounter);
        do spawnShape();
       
      return;
    }

    method void moveShapeLeft() {
      var Array newPosition;
      var boolean isValidMove;
      let newPosition = shape.peekMoveLeft();
      let isValidMove = checkValidPosition(newPosition);
      if (isValidMove) {
        do shape.moveLeft();
        do drawOutline();
      }
      return;
    }

     method void moveShapeRight() {
      var Array newPosition;
      var boolean isValidMove;
      let newPosition = shape.peekMoveRight();
      let isValidMove = checkValidPosition(newPosition);
      if (isValidMove) {
        do shape.moveRight();
        do drawOutline();
      }
      return;
    }

     method void rotateShape() {
      var Array newPosition;
      var boolean isValidMove;
      let newPosition = shape.peekRotation();
      let isValidMove = checkValidPosition(newPosition);
      if (isValidMove) {
        do shape.rotate();
        do drawOutline();
      }
      return;
    }

    method boolean checkValidPosition(Array coords) {
      var boolean loop;
      var int i, startColPixel, startRowPixel, rowVal, colVal;
      var Array point, row;
      let loop = true;
      let i = 0;
    	while (loop) {
        let point = coords[i];
        let rowVal = point[0];
        let colVal = point[1];
   
        if (rowVal < 0) {
          return false;
        }

        if (rowVal > (nRows - 1)) {
          return false;
        }

        if (colVal < 0) {
          return false;
        }

        if (colVal > (nCols - 1)) {
          return false;
        }

        let row = grid[rowVal];
        if (row[colVal]) {
          return false;
        }

        let i = i + 1;
        if (~(i < 4)) {
          let loop = false;
        }
    	}
      return true; 
    }

  method void  addToGrid(Array coords) {
      var boolean loop, rowFilled;
      var int i, j, startColPixel, startRowPixel, rowVal, colVal;
      var Array point, row;
      let loop = true;
      let i = 0;
    	  while (loop) {
        let point = coords[i];
        let rowVal = point[0];
        let colVal = point[1];
        let row = grid[rowVal];
        let row[colVal] = true;
        let i = i + 1;
        if (~(i < 4)) {
          let loop = false;
        }
    	}

      do simplifyGrid();
      return; 
    }

    method void simplifyGrid() {
        var int i, rowNo, rowToRemove;
        var boolean foundRow;
        let i = 0;
        let rowToRemove = findFilledRow();
        while (rowToRemove > -1) {
          do clearRow(rowToRemove);
          let rowToRemove = findFilledRow();
        }

        return;
    }

    method int findFilledRow() {
        var int i, j, rowNo;
        var boolean rowFilled;
        var Array row;
        let i = 0;

        while( i < nRows) {
            let row = grid[i];
            let rowFilled = true;
            let j = 0;
            while(j < nCols) {
           
            if (~row[j]) {
              let rowFilled = false;
              let rowNo = i;
            }
                let j = j + 1;
            }
            if (rowFilled) {
              return i;
            }
            let i = i + 1;
        }
        return -1;
    }

    method void awardPoint() {
      let score = score + 1;
      do drawScore();
      return;
    }

    method void clearRow(int rowToClear) {
      var int j, i, startColPixel, startRowPixel, rowVal, colVal, rowToClear;
      var Array point, row, prevRow, curRow;

      // add point to score
      do awardPoint();
      // shift rows up
        let i = rowToClear;
          while( i > 0) {
          let j = 0;
          let prevRow = grid[i - 1];
          let curRow = grid[i];
          while (j < nCols) {
            let curRow[j] = prevRow[j];
            let j = j + 1;
          }
          let i = i - 1;
        }


        let rowToClear = 0;
        do Screen.setColor(false);
        let row = grid[rowToClear];
        let j = 0;
         let row = Array.new(nCols);
            let j = 0;
            while( j < nCols) {
                let row[j] = false;
                let j = j + 1;
            }
            let grid[rowToClear] = row;
         return;
    }
}