// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Shape/Shape.jack

/** Implements a graphical Shape. */
class Shape {

   field Array coords; // screen location of the Shape's top-left corner
   field String type;
   field int startRow, startCol, squareSize;

   /** Constructs a new Shape with a given location and size. */
   constructor Shape new(Stint _startRow, int _startCol, int _squareSize) {
      let type = "straight";
      let startRow = _startRow;
      let startCol = _startCol;
      let squareSize = _squareSize;
      let coords = Array.new(4);
      do makeShape(type);
      return this;
   }

  method void makeShape(String type) {
    var Array point;
    // if (type = "straight") {
        let point = Array.new(2);
        let point[0] = 0 ;
        let point[1] = 0 ;
        let coords[0] = point;

        let point = Array.new(2);
        let point[0] = 0 ;
        let point[1] = 1 ;
        let coords[1] = point;

        let point = Array.new(2);
        let point[0] =  0 ;
        let point[1] = 2 ;
        let coords[2] = point;

        let point = Array.new(2);
        let point[0] = 0 ;
        let point[1] =  3;
        let coords[3] = point;
      // }
    return;
      
  }

   /** Disposes this Shape. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws the Shape on the screen. */
   method void draw() {
      var boolean loop;
      var int i;
      var Array point;
      let loop = true;
      let i = 0;
    	while (loop) {
    	   let point = coords[i];

             do Output.moveCursor(2, 2);
     do Output.printInt(point[0]);
             do Output.moveCursor(20, 2);
          
      do Output.printInt(point[1]);

         do Screen.drawRectangle(startRow +  point[0] * squareSize, startCol + point[1] * squareSize, startRow + point[0] * squareSize + squareSize,  startCol + point[1] * squareSize + squareSize);
        //  do Screen.drawRectangle( point[0] * squareSize,  point[1] * squareSize,  point[0] * squareSize + squareSize,  point[1] * squareSize + squareSize);
         let i = i + 1;
        if (~(i < 4)) {
          let loop = false;
        }

    	  
    	}
      return;
   }

  //  /** Erases the Shape from the screen. */
  //  method void erase() {
  //     do Screen.setColor(false);
  //     do Screen.drawRectangle(x, y, x + size, y + size);
  //     return;
  //  }

   /** Moves the Shape down by 2 pixels. */
   method void moveDown() {
      let startRow = startRow + 1
      return;
   }

  //  /** Moves the Shape left by 2 pixels. */
  //  method void moveLeft() {
  //     if (x > 1) {
  //        do Screen.setColor(false);
  //        do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
  //        let x = x - 2;
  //        do Screen.setColor(true);
  //        do Screen.drawRectangle(x, y, x + 1, y + size);
  //     }
  //     return;
  //  }

  //  /** Moves the Shape right by 2 pixels. */
  //  method void moveRight() {
  //     if ((x + size) < 510) {
  //        do Screen.setColor(false);
  //        do Screen.drawRectangle(x, y, x + 1, y + size);
  //        let x = x + 2;
  //        do Screen.setColor(true);
  //        do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
  //     }
  //     return;
  //  }
}
